"""
``testproblems`` is a dictionary of fixed-point test problems to test acceleration algorithms. To see the full list of problems:
```Julia
using FixedPointTestProblems
keys(testproblems)
```
All problems provide a starting point and an in-place mapping function in a ``@NamedTuple`` generated by a function. To generate a problem:
```Julia
x0, map! = testproblems["Higham, correlation matrix mmb13"]()
```
To solve without acceleration:
```Julia
xin = copy(x0)
xout = similar(x0)
for i in 1:1000
    map!(xout, xin)
    norm_resid = norm(xout .- xin)
    println(i,  "  ", norm_resid)
    norm_resid < 1e-8 && break
    xin .= xout
end
```
For some problems like EM algorithm applications, an objective function is also available:
```Julia
	x0, map!, obj = testproblems["Mixture of 3 normals"]()
```
The problems can be generated with varying precisions, and sometimes varying specifications:
```Julia
	x0, map! = testproblems["Bratu"](;nx = 50, ny = 50, T = Float16)
```
To learn more about a problem and its available keyword arguments, it must first be extracted from the dictionary.
```Julia
p = testproblems["Bratu"]
? p
```
"""
testproblems = Dict{AbstractString, Function}()

include("problems/als_canonical_tensor.jl")
testproblems["ALS for CANDECOMP"] = gen_als_canonical_tensor

include("problems/Bratu.jl")
testproblems["Bratu"] = gen_bratu

include("problems/consumption_smoothing.jl")
testproblems["Consumption smoothing"] = gen_consumption_smoothing

include("problems/exchange_economy.jl")
testproblems["Exchange economy"] = gen_exchange_economy

include("problems/Hasselblad_Poisson_mixtures.jl")
testproblems["Hasselblad, Poisson mixtures"] = gen_hasselblad_poisson_mixtures

include("problems/Higham_corr_matrix.jl")
testproblems["Higham, correlation matrix mmb13"] = gen_higham_corr_matrix

include("problems/Lange_ancestry.jl")
testproblems["Lange, ancestry"] = gen_lange_ancestry

include("problems/lid_cavity_flow.jl")
testproblems["Lid-driven cavity ï¬‚ow"] = gen_lid_cavity_flow

include("problems/linear.jl")
testproblems["Linear"] = gen_linear

include("problems/em_mixture_of_3_normals.jl") # Removed because: can't generate multivariate normals, no 
testproblems["Mixture of 3 normals"] = gen_em_mixture_of_3_normals

include("problems/potential_electric_field.jl")
testproblems["Electric field, Gauss-Seidel"] = (;n = 100, randomize = false, T = typeof(1.)) -> gen_potential_electric_field(; algo! = gauss_seidel!, randomize, n, T)
testproblems["Electric field, Jacobi"] = (;n = 100, randomize = false, T = typeof(1.)) -> gen_potential_electric_field(; algo! = jacobi!, randomize, n, T)
testproblems["Electric field, SOR"] = (;n = 100, randomize = false, T = typeof(1.)) -> gen_potential_electric_field(; algo! = SOR!, randomize, n, T)

include("problems/power_iteration.jl")
testproblems["Power iter. for dom. eigenvalue"] = gen_power_iteration

include("problems/Wang_PH_interval_censoring.jl")
testproblems["Wang, PH interval censoring"] = gen_Wang_PH_interval_censoring